// <auto-generated />
using DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace codespaces_blank.Migrations
{
    [DbContext(typeof(EmoticonsDbContext))]
    [Migration("20250115133958_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("DataAccess.Models.EmoticonModel", b =>
                {
                    b.Property<string>("Emoticon")
                        .HasColumnType("TEXT");

                    b.HasKey("Emoticon");

                    b.ToTable("Emoticons");
                });

            modelBuilder.Entity("DataAccess.Models.TagModel", b =>
                {
                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("Tag");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("EmoticonModelTagModel", b =>
                {
                    b.Property<string>("EmoticonsEmoticon")
                        .HasColumnType("TEXT");

                    b.Property<string>("TagsTag")
                        .HasColumnType("TEXT");

                    b.HasKey("EmoticonsEmoticon", "TagsTag");

                    b.HasIndex("TagsTag");

                    b.ToTable("EmoticonModelTagModel");
                });

            modelBuilder.Entity("EmoticonModelTagModel", b =>
                {
                    b.HasOne("DataAccess.Models.EmoticonModel", null)
                        .WithMany()
                        .HasForeignKey("EmoticonsEmoticon")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.TagModel", null)
                        .WithMany()
                        .HasForeignKey("TagsTag")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
